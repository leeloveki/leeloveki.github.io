<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/03/DDL/"/>
    <url>/2022/11/03/DDL/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>SQL: 结构化查询语言(Structured Query Language)</p><p>SQL数据库: 关系型数据库, 关注于数据间的关系</p><p>NO-SQL数据库: 非关系型数据库, 关注于存储数据本身</p><p>SQL语言分为: DDLDMLDQLDCL 事务控制语句</p><p>DDL:  数据库定义语言(Data Definition Language)</p><blockquote><p>用于建库建表</p></blockquote><p>DML:  数据库操作语言(Data Manipulation language)</p><blockquote><p>用于对表进行增删查改</p></blockquote><p>DQL:  数据库查询语言(Data Query Language)</p><blockquote><p>在表中查询数据[重点学习]</p></blockquote><p>DCL:  数据库控制语言(Data Control language)</p><blockquote><p>用于设定权限(数据库 表 数据)</p></blockquote><table><thead><tr><th>分类</th><th>关键字</th></tr></thead><tbody><tr><td>DDL</td><td>create  update  delete</td></tr><tr><td>DML</td><td>create  alter  drop  truncate</td></tr><tr><td>DQL</td><td>select</td></tr><tr><td>DCL</td><td>grant  revoke</td></tr><tr><td>事务控制语句</td><td>commit  rollback  savepoint add constraint</td></tr></tbody></table><p>查询语句是最复杂功能最丰富的SQL语句(面试重点)</p><p><strong>SQL语句的关键字不区分大小写</strong></p><blockquote><p>注意标识符是区分大小写的</p></blockquote><p>标识符命名规则:</p><ol><li>以字母开头</li><li>由字母 数字和三个特殊符号组成 #_$</li><li>多个单词用_分割开组成</li></ol><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><p>DDL是数据库定义语言, 用于对数据库进行增删查改</p><table><thead><tr><th>DDL命令</th><th>功能</th></tr></thead><tbody><tr><td>create</td><td>创建数据库或者数据库对象</td></tr><tr><td>drop</td><td>删除数据库或者数据库对象</td></tr><tr><td>alter</td><td>更改数据库结构或属性</td></tr><tr><td>truncate</td><td>删除表的所有记录, 包括分配的内存空间</td></tr><tr><td>comment</td><td>添加注释</td></tr><tr><td>rename</td><td>重命名数据库对象</td></tr></tbody></table><p>数据库对象: </p><table><thead><tr><th>名称</th><th>英文</th></tr></thead><tbody><tr><td>表</td><td>table</td></tr><tr><td>索引</td><td>index</td></tr><tr><td>函数</td><td>function</td></tr><tr><td>视图</td><td>view</td></tr><tr><td>存储过程</td><td>store procedure</td></tr><tr><td>触发器</td><td>trigger</td></tr></tbody></table><p><strong>MYSQL不支持重命名数据库, 但是可以将数据库复制到新命名的数据库</strong></p><blockquote><p>Data Definition Language </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建一个test数据库, 设置其字符集为utf8mb4<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>utf8mb4等同于java中的utf<span class="hljs-number">-8</span>, 四个字节存储空间<br><span class="hljs-keyword">create</span> database test <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> <span class="hljs-string">&#x27;utf8mb4&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>utf8在数据库只有3个字节, 尽量使用utf8mb4</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改数据库的字符集<br><span class="hljs-keyword">alter</span> database test <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> <span class="hljs-string">&#x27;utf8mb4&#x27;</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除数据库<br><span class="hljs-keyword">drop</span> database test;<br></code></pre></td></tr></table></figure><blockquote><p>在test数据库中创建stu_info表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>进入test数据库进行操作<br>use test;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建空的stu_info表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu_info();<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建有数据的teacher_info表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> teacher_info(<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列名 数据类型(size) [约束],<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>size<span class="hljs-operator">=</span><span class="hljs-number">20</span>代表有<span class="hljs-number">20</span>个字符<br>teacher_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>数据类型不需要添加size<br>age <span class="hljs-type">int</span>,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>小数点数<br>    test_price <span class="hljs-type">decimal</span>,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">default</span>设置默认值约束, 不设置默认值会为空(<span class="hljs-keyword">null</span>)<br>    test_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;小白&#x27;</span>,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>大文本类型<br>    test_text text,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>图片文件(二进制文件)<br>    test_img <span class="hljs-type">blob</span>,<br>gender <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),<br>work_no <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><blockquote><p>修改表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改表名teacher_info为new_teacher_info<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher_info rename <span class="hljs-keyword">to</span> new_teacher_info;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>向表中添加列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher_info <span class="hljs-keyword">add</span> birthday <span class="hljs-type">date</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher_info change birthday teacher_birthday <span class="hljs-type">int</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher_info <span class="hljs-keyword">drop</span> birthday;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除表<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> teacher_info;<br></code></pre></td></tr></table></figure><h1 id="MYSQL数据类型"><a href="#MYSQL数据类型" class="headerlink" title="MYSQL数据类型"></a>MYSQL数据类型</h1><p>mysql中的数据类型主要有3种数值类型 字符串类型  日期类型</p><table><thead><tr><th>类型</th><th>具体类型</th></tr></thead><tbody><tr><td>数值类型</td><td>严格数值类型 近似数值类型</td></tr><tr><td>字符串类型</td><td>char, varchar, binary, varbinary, blob, text, enum, set</td></tr><tr><td>日期类型</td><td>datetime, timestamp, date, time, year</td></tr></tbody></table><p><strong>mysql支持所有标准sql数值类型</strong></p><p>严格数值类型:integer(int) smallint decimal(dec) numeric</p><p>近似数值类型:float real double precision</p><p>字符串类型:</p><blockquote><p>varchar:  变长字符串char:  定长字符串</p><p>blob:  二进制长文本数据text:  长文本数据</p><p>char(30)代表其可以存储30个字符, 并非代表字节个数</p></blockquote><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><p>DML用于表操作</p><blockquote><p>Data Manipulation Language</p></blockquote><h1 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h1><p>ER图: 实体关系图(Entity Relationship图)</p><p>ER图是需求分析的结果</p><p>用于描述实体间的关系, 通过ER图可以设计对应的数据库</p><p>ER图的组成部分: 矩形椭圆菱形</p><blockquote><p>矩形表示实体</p><p>椭圆表示属性(实体的属性)</p><p>菱形表示关系(实体间的关系)</p></blockquote><p><img src="/2022/11/03/DDL/image-20220524144901109.png" alt="image-20220524144901109"></p><blockquote><p>ER图一般由产品经理在需求分析阶段提供, 用于设计对应的数据库</p></blockquote><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>约束(constraint)是对数据库数据做的限制</p><p>可以用于限制一列的数据或者一行的数据</p><p>主键约束: primary key</p><p><strong>主键必须是唯一的, 不能为空, 尽量避免修改主键</strong></p><blockquote><p>注意多个列可以组合构成主键, 被称为复合主键</p></blockquote><blockquote><p>创建带约束的表</p></blockquote><p>外键可以有重复值, 可以为空(即使主键是非空的),</p><p>外键必须对应另外一个表的主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user_info(<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>设置自增<br>id <span class="hljs-type">int</span> auto_increment,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>设置非空<br>user_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>设置唯一<br>login_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span>,<br>telephone <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span>,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>设置默认<br>edu_school <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span>(<span class="hljs-string">&#x27;蜗牛学苑&#x27;</span>),<br>fk_role_id <span class="hljs-type">int</span>,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>设置主键<br><span class="hljs-keyword">primary</span> key(id),<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>设置外键<br><span class="hljs-keyword">foreign</span> key(fk_role_id) <span class="hljs-keyword">references</span> role_info(id)<br>);<br></code></pre></td></tr></table></figure><blockquote><p>在表中增加约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>主键约束<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test5(<br>pk_id <span class="hljs-type">int</span>,<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>约束是一个独立语句应该用逗号分隔开<br><span class="hljs-keyword">primary</span> key(pk_id)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>将id设置为主键<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test8 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除表的主键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test8 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>在表里增加列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test9 <span class="hljs-keyword">add</span> ok2 <span class="hljs-type">int</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>将ok列设置为唯一的, 不允许有重复值<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test9 <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span>(ok);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>将ok2列的默认值设置为<span class="hljs-keyword">default</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test9 <span class="hljs-keyword">alter</span> ok2 <span class="hljs-keyword">set</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>将ok列重新定义(重命名并设置属性和注释)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>注释一般在定义表的时候给列添加, 并非设计成可以用语句单独修改<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test9 change `ok` `ok3` <span class="hljs-type">int</span> comment &quot;id of test&quot;;<br></code></pre></td></tr></table></figure><p>对于外键约束, mysql会默认进行级联检查</p><blockquote><p>可以用SQL语句将级联检查报错机制改为自动级联删除, 级联更新机制</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> cascade <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> cascade;<br></code></pre></td></tr></table></figure><blockquote><p>级联检查机制对于大数据量的表来说效率低, 耗费时间</p><p>所以一般不添加外键约束, 使用自定义列作为无约束’外键’, 不属于SQL范畴的外键</p></blockquote><h1 id="数据库范式-Normalization"><a href="#数据库范式-Normalization" class="headerlink" title="数据库范式(Normalization)"></a>数据库范式(Normalization)</h1><p>数据库范式有 1NF 2NF 3NF BCNF 4NF 5NF 6NF</p><p><strong>范式中1NF 2NF 3NF是最重要的</strong></p><p>第一范式: 原子性, 每一列都不能再被拆分</p><p>第二范式: 1NF的基础上, 所有列必须与主键有关系(相关)</p><blockquote><p>要求一个表中必须有主键(必须是单列主键, 不能是复合主键), 所有的列都必须与主键有关系</p></blockquote><blockquote><p>主键必须是每行信息的唯一标识</p><p>所有的列都必须与主键有关系</p></blockquote><p>第三范式: 1NF 2NF的基础上要求, 所有列必须跟主键有直接关系, 不能是间接关系</p><blockquote><p>间接关系: 属性A依赖于属性B再依赖于主键</p></blockquote><p>解释:</p><blockquote><p>遵循第一范式时要根据系统实际需求来合理设计,  例如地址属性中如果’城市’部分经常被访问, 那么需要将地址中的城市等部分拆分开来存储才算满足数据库第一范式</p></blockquote><blockquote><p>第二范式: 不能将可以存储成多个表的数据保存在同一个表里, 例如商场数据库中, 商品信息和订单信息应该用两个不同的表来存储, 减少数据库冗余才算满足第二范式</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/03/DCL/"/>
    <url>/2022/11/03/DCL/</url>
    
    <content type="html"><![CDATA[<h1 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h1><p>DLC: 数据库控制语言, 通常由DBA用于管理数据库权限</p><blockquote><p>Data Controller Language</p></blockquote><p>作用: 管理数据库的权限</p><blockquote><p>管理用户访问和操作特定数据库或表的权限</p></blockquote><p>面试题:</p><p>在公司内不能用数据库root账号进行开发</p><blockquote><p>按照团队分: 开发 测试 运维</p><p>也会按照项目分</p></blockquote><p><strong>一般不能将数据库访问权限提供给第三方使用</strong></p><p>需要提供数据给第三方时可以通过api</p><p><strong>表权限有四种: 增删查改 insert delete select update</strong></p><p>**增删查改的英文为CRUD: create read update delete</p><blockquote><p>DCL语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">#将woniuxy数据库的所有表的所有权限授权给用户<span class="hljs-keyword">user</span>@任何IP地址<br>#注意数据库的权限需要通过用户名和登陆的IP地址进行双重认证<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> woniuxy.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>#注意mysql8不允许在<span class="hljs-keyword">grant</span>命令中新建用户, 所以下行<span class="hljs-keyword">sql</span>命令会报错<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> woniuxy.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;new_user&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br>#刷新权限<br>flush privileges;<br></code></pre></td></tr></table></figure><blockquote><p>移除权限</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#移除增改删权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span>,<span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> woniuxy.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>#刷新权限<br>flush privileges;<br></code></pre></td></tr></table></figure><blockquote><p>SQL命令创建用户</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询系统表中的密码限制的环境变量<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;validate_password%&#x27;</span>;<br>#创建一个test用户,设置密码<span class="hljs-number">12345678</span>aA<span class="hljs-operator">!</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> test identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;12345678aA!&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图 view被称为虚拟表, 视图本身不存储数据, 仅仅存储查询语句从数据库中读取数据并展示</p><blockquote><p>所以当数据库中的数据发生变化时, 表展示的数据也会变化</p></blockquote><blockquote><p>创建一个表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">#创建一张v_test表, 存储woniuxy数据库中test表的id字段数据<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> v_test <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> woniuxy.test;<br>#跟子查询一样, 视图也可以作为查询语句的数据源<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v_test;<br>#删除视图<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> v_test;<br></code></pre></td></tr></table></figure><p><strong>查询语句的返回结果本质就是一个临时视图(行内视图)</strong></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>常见的函数: <strong>注意函数的操作对象一般为单个字段</strong></p><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>count</td><td>计数</td></tr><tr><td>sum</td><td>求和</td></tr><tr><td>avg</td><td>求平均值</td></tr><tr><td>max</td><td>求最大值</td></tr><tr><td>min</td><td>求最小值</td></tr><tr><td>ifnull</td><td>筛选并保留空值</td></tr><tr><td>group_concat</td><td>将某个字段的多行记录合并为一行记录, 用逗号分割</td></tr></tbody></table><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><strong>字符串函数的操作对象可以为字段或字符串</strong></p><p><strong>字符串函数不会操作数据源本身, 仅仅是将操作结果打印出来</strong></p><p>字符串函数有</p><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>concat(a,b)</td><td>拼接a和b</td></tr><tr><td>substr( … from … for …)</td><td>截取</td></tr><tr><td>trim( a from b)</td><td>从b中删除a(删除位置是开头和结尾,可以匹配多个, 不会删除中间被其他字符包围的a)</td></tr><tr><td>trim(a)</td><td>删除a中的空格</td></tr><tr><td>uuid()</td><td>没有操作对象, 直接返回一个36位的随机码(字符串)</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">#将id字段和stu_name字段合并为一列新记录, 并且插入字符串<br><span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;id:&#x27;</span>,id,<span class="hljs-string">&#x27;  姓名:&#x27;</span>,stu_name) <span class="hljs-keyword">from</span> stu_info;<br>#删除stu_name的空格并输出<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">trim</span>(stu_name) <span class="hljs-keyword">from</span> stu_info;<br>#删除学生姓名开头或结尾的<span class="hljs-string">&#x27;张&#x27;</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">TRIM</span>(<span class="hljs-string">&#x27;张&#x27;</span> <span class="hljs-keyword">from</span> stu_name) <span class="hljs-keyword">from</span> stu_info;<br></code></pre></td></tr></table></figure><p>常用日期函数</p><blockquote><p>下列三个函数都没有操作对象, 直接返回一个表示当前时间的字符串</p></blockquote><table><thead><tr><th>函数</th><th>格式</th></tr></thead><tbody><tr><td>now()</td><td>yyyy-MM-dd hh:mm:ss</td></tr><tr><td>curdate()</td><td>yyyy-MM-dd</td></tr><tr><td>curtime()</td><td>hh:mm:ss</td></tr></tbody></table><p>year() month() day() 分别读取对象中的年份 月份 日</p><p><strong>dual表是一个虚拟表, 不包含任何数据 仅仅用于使sql命令符合语法要求</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">#获取当前的年份<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">year</span>(now()) <span class="hljs-keyword">from</span> dual;<br>#获取当前的月份<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">month</span>(now()) <span class="hljs-keyword">from</span> dual;<br>#获取当前的天数<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">day</span>(now()) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></figure><p>一个完整的软件系统应该包含程序(计算逻辑)和数据</p><p>DBMS通过提供函数提供了计算能力, 而不仅仅是存储数据</p><p><strong>数据库自定义函数仅仅需要了解, 不需要深究</strong></p><p>调用自定义函数必须使用select语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> test_max(id) <span class="hljs-keyword">from</span> test;<br></code></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>一般的函数都只能通过select语句调用, 意味着其返回结果只能打印出来而不能存储到数据库中</p><p>存储过程是一个特殊的函数,不需要通过select语句执行</p><p>可以使用存储过程来修改数据库</p><blockquote><p>delimiter语句用于声明函数或存储过程的开始和结束</p></blockquote><p>delimiter $$ … $$ delimiter;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter $$<br>#声明存储过程<br>#<span class="hljs-keyword">in</span>表示输入参数 <span class="hljs-keyword">out</span>表示输出参数 <span class="hljs-keyword">inout</span>表示该参数可以输入也可以输出<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> test(<span class="hljs-keyword">in</span> id <span class="hljs-type">int</span>,<span class="hljs-keyword">in</span> name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<span class="hljs-keyword">out</span> res <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span> <br>... #<span class="hljs-keyword">sql</span>命令<br><span class="hljs-keyword">end</span>$$<br>delimiter;<br></code></pre></td></tr></table></figure><blockquote><p>调用存储过程</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-variable">@res</span>表示全局参数<br><span class="hljs-keyword">call</span> test(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;小白&#x27;</span>,<span class="hljs-variable">@res</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@res</span>;<br></code></pre></td></tr></table></figure><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>mysql中常用的约束有4种</p><table><thead><tr><th>关键字</th><th>限制</th></tr></thead><tbody><tr><td>not null</td><td>非空</td></tr><tr><td>unique</td><td>唯一</td></tr><tr><td>primary key</td><td>主键</td></tr><tr><td>foreign key</td><td>外键</td></tr></tbody></table><blockquote><p>auto_increment和default并非约束, 而是添加新数据的逻辑, 不会对字段数据进行完整性检查</p></blockquote><p>主键约束 primary key</p><p>主键约束包含了非空约束和唯一约束, 意味着主键必须是非空且唯一的</p><p>一个表只允许有一个主键</p><p>主键可以是一个字段或者多个字段组成(复合主键)</p><p>约束分为列级(字段)约束和表级约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test(<br>    #列级约束<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br>    #创建表级约束并设置约束名test<br>    <span class="hljs-keyword">constraint</span> test <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br>    #创建表级约束, 多个字段作为复合主键<br>    <span class="hljs-keyword">primary</span> key(id,name)<br>);<br>#用<span class="hljs-keyword">alter</span> ... modify ... 语句修改列定义来添加列级约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test modify id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key;<br>#添加新的主键约束前必须先删除旧主键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key;<br>#删除约束名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test <span class="hljs-keyword">drop</span> index test;<br>#用<span class="hljs-keyword">alter</span> ... <span class="hljs-keyword">add</span> ... 语句来添加表级约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key(id);<br></code></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务(Transaction)</p><p>事务是数据库操作的执行基本单位, 事务可以包含一个或多个sql语句</p><p>早期的mysql存储引擎不支持事务, 现在mysql默认使用的InnoDB引擎提供了良好的事务支持</p><p>面试题: myisam和innodb的区别</p><table><thead><tr><th>特性</th><th>innodb</th><th>myisam</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>256TB</td></tr><tr><td>事务支持</td><td>支持</td><td>不支持</td></tr><tr><td>外键支持</td><td>支持</td><td>不支持</td></tr><tr><td>数据缓存支持</td><td>支持</td><td>不支持</td></tr><tr><td>默认储存引擎版本</td><td>mysql5.5及之后</td><td>mysql5.5之前</td></tr><tr><td>事务多线程安全</td><td>支持表锁</td><td>支持行锁</td></tr><tr><td>每个表对应的文件数目</td><td>2个(frm,ibd)</td><td>3个(frm,myd,myi)</td></tr><tr><td>默认索引结构</td><td>树形(B+树)</td><td>hash</td></tr></tbody></table><table><thead><tr><th>特性</th><th>树形索引</th><th>hash索引</th></tr></thead><tbody><tr><td>聚簇</td><td>支持</td><td>不支持</td></tr><tr><td>范围查找</td><td>支持</td><td>不支持</td></tr></tbody></table><blockquote><p>myisam其实支持树结构索引, 但是没有用树作为默认索引结构</p><p>innodb不支持hash索引</p></blockquote><p><strong>mysql作为DBMS有三层架构</strong></p><ol><li>连接层 处理客户端连接和鉴权认证</li><li>服务层 负责查询语句(select语句)的解析 优化 缓存, 还有内置函数和存储过程的实现</li><li>存储引擎  负责数据库中数据的存储 提取(write read)</li></ol><p><img src="/2022/11/03/DCL/image-20220527154444039.png" alt="image-20220527154444039"></p><p><strong>存储引擎是DBMS架构的最底层并且最核心的组成部分, 直接负责事务的实现</strong></p><blockquote><p>执行sql命令时会自动生成事务,自动提交</p></blockquote><blockquote><p>mysql手动声明事务</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">#声明事务开始<br><span class="hljs-keyword">start</span> transaction;<br>#<span class="hljs-keyword">start</span> transaction等同于<span class="hljs-keyword">begin</span>语句<br>#<span class="hljs-keyword">rollback</span>;语句会上面的所有语句注释掉, 必须进行新的声明(<span class="hljs-keyword">begin</span>)<br>#一条或多条<span class="hljs-keyword">sql</span>语句<br>... <br>#提交事务, 将<span class="hljs-keyword">sql</span>命令的执行结构写入数据库<br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><p>事务必须满足四特性: ACID</p><table><thead><tr><th>特性</th><th>要求</th><th>英文</th></tr></thead><tbody><tr><td>原子性</td><td>事务不可再分</td><td>atomicity</td></tr><tr><td>一致性</td><td>同一事务的数据准确无误, 不能有差异</td><td>consistency</td></tr><tr><td>隔离性</td><td>不同事务间相互独立, 互不干扰</td><td>isolation</td></tr><tr><td>持久性</td><td>一条事务被commit后存储到磁盘中, 在执行新事务前数据不能被修改</td><td>durability</td></tr></tbody></table><blockquote><p>事务要保证正确可靠必须具备ACID四特性</p></blockquote><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引: index</p><p>可以通过索引快速查找到数据库中的数据</p><p><strong>索引可以提高数据库的查询效率</strong></p><blockquote><p>hash索引结构</p></blockquote><p><img src="/2022/11/03/DCL/image-20220527175935911.png" alt="image-20220527175935911"></p><p>hash索引结构不支持范围查找和聚簇索引</p><p>innoDB是用B+树结构作为索引结构</p><blockquote><p>B+树索引结构</p></blockquote><p><img src="/2022/11/03/DCL/image-20220527180430136.png" alt="image-20220527180430136"></p><blockquote><p>B+树索引(并且主键作为索引)可以将其余数据都聚合到索引叶子节点上, 这被称为聚簇索引</p><p>B+树索引支持范围查询, 搜索效率高</p></blockquote><p>聚簇: 索引和数据放在同一个区域中</p><p>非聚簇: 索引和数据放在不同的区域</p><h1 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h1><p>b树: b-tree</p><p>b树是一种特殊的自平衡搜索树</p><blockquote><p>注意b树不是二叉树, 可以有多个子节点</p></blockquote><p><strong>二叉树适合将数据存储到内存中</strong></p><p>而B树的数据一般保存到磁盘中</p><p>B树的设计思想是尽量减少树的高度(减少磁盘的访问次数)</p><blockquote><p>内存的数据访问时间非常快,适合进行多次访问</p><p>而磁盘的数据访问时间非常慢, 需要尽量减少访问次数</p></blockquote><p>树状数据的操作(搜索 插入 删除 求最大值或最小值)所需磁盘时间为O(h)</p><blockquote><p>h为树的高度</p></blockquote><p>B树的节点数目需要尽可能接近或等同于磁盘块大小(block)</p><blockquote><p>block是磁盘读写的基本单位</p></blockquote><p>自平衡二叉搜索树(如红黑树, AVL树), 由于其节点最多只能有两个子节点, 导致其高度很高, 需要频繁进行数据访问</p><p>而B树的高度尽可能的降低, 所以其数据访问次数会比二叉树低很多</p><p><strong>B树的操作(搜索 插入 删除)时间复杂度为O(log n)</strong></p><p>B树特性:</p><ol><li>所有</li></ol><h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><p>B+树是一种特殊的B树, B+树只能用叶子来存储数据指针</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/03/hello-world/"/>
    <url>/2022/11/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
